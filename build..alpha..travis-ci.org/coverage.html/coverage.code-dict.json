{"/home/travis/build/npmtest/node-npmtest-cordova-custom-config/test.js":"/* istanbul instrument in package npmtest_cordova_custom_config */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-custom-config/lib.npmtest_cordova_custom_config.js":"/* istanbul instrument in package npmtest_cordova_custom_config */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_custom_config = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_custom_config = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-custom-config/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-custom-config && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_custom_config */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_custom_config\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_custom_config.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_cordova_custom_config.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_custom_config.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_cordova_custom_config.__dirname +\n                    '/lib.npmtest_cordova_custom_config.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-custom-config/node_modules/cordova-custom-config/hooks/applyCustomConfig.js":"#!/usr/bin/env node\n\n/**********\n * Globals\n **********/\n// Pre-existing Cordova npm modules\nvar deferral, path, cwd;\n\n// Npm dependencies\nvar logger,\n    fs,\n    _ ,\n    et,\n    plist,\n    xcode,\n    tostr,\n    os,\n    fileUtils;\n\n// Other globals\nvar hooksPath;\n\nvar applyCustomConfig = (function(){\n\n    /**********************\n     * Internal properties\n     *********************/\n\n    var defaultHook = \"after_prepare\";\n\n    var applyCustomConfig = {}, rootdir, context, configXml, projectName, settings = {}, updatedFiles = {};\n\n    var androidActivityNames = [\n        \"CordovaApp\",  // Cordova <= 4.2.0\n        \"MainActivity\" // Cordova >= 4.3.0\n    ];\n\n    // Tags that can appear multiple times\n    // Specified by parent and distinguished by name or label\n\n    var androidMultiples = [\n        {\n            tag: \"uses-permission\",\n            parent: \"./\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"permission\",\n            parent: \"./\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"permission-tree\",\n            parent: \"./\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"permission-group\",\n            parent: \"./\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"instrumentation\",\n            parent: \"./\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"uses-configuration\",\n            parent: \"./\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"uses-feature\",\n            parent: \"./\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"compatible-screens\",\n            parent: \"./\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"activity\",\n            parent: \"./application\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"activity-alias\",\n            parent: \"./application\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"service\",\n            parent: \"./application\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"receiver\",\n            parent: \"./application\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"provider\",\n            parent: \"./application\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"uses-library\",\n            parent: \"./application\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"meta-data\",\n            parent: \"./application\",\n            uniqueBy: \"name\"\n        },\n        {\n            tag: \"intent-filter\",\n            parent: \"./application/activity/[@android:name='MainActivity']\",\n            uniqueBy: \"label\"\n        },\n        {\n            tag: \"meta-data\",\n            parent: \"./application/activity/[@android:name='MainActivity']\",\n            uniqueBy: \"name\"\n        }\n    ];\n\n    var xcconfigs = [\"build.xcconfig\", \"build-extras.xcconfig\", \"build-debug.xcconfig\", \"build-release.xcconfig\"];\n\n    var preferencesData;\n\n    var syncOperationsComplete = false;\n    var asyncOperationsRemaining = 0;\n\n\n    /*********************\n     * Internal functions\n     *********************/\n\n    // Converts an elementtree object to an xml string.  Since this is used for plist values, we don't care about attributes\n    function eltreeToXmlString(data) {\n        var tag = data.tag;\n        var el = '<' + tag + '>';\n\n        if(data.text && data.text.trim()) {\n            el += data.text.trim();\n        } else {\n            _.each(data.getchildren(), function (child) {\n                el += eltreeToXmlString(child);\n            });\n        }\n\n        el += '</' + tag + '>';\n        return el;\n    }\n\n\n    /* Retrieves all <preferences ..> from config.xml and returns a map of preferences with platform as the key.\n     *  If a platform is supplied, common prefs + platform prefs will be returned, otherwise just common prefs are returned.\n     */\n    function getPlatformPreferences(platform) {\n        //init common config.xml prefs if we haven't already\n        if(!preferencesData) {\n            preferencesData = {\n                common: configXml.findall('preference')\n            };\n        }\n\n        var prefs = preferencesData.common || [];\n        if(platform) {\n            if(!preferencesData[platform]) {\n                preferencesData[platform] = configXml.findall('platform[@name=\\'' + platform + '\\']/preference');\n            }\n            prefs = prefs.concat(preferencesData[platform]);\n        }\n\n        return prefs;\n    }\n\n    /**\n     * Implementation of _.keyBy so old versions of lodash (<2.0.0) don't cause issues\n     */\n    function keyBy(arr, fn){\n        var result = {};\n        arr.forEach(function(v){\n            result[fn(v)] = v;\n        });\n        return result;\n    }\n\n    /* Retrieves all configured xml for a specific platform/target/parent element nested inside a platforms config-file\n     element within the config.xml.  The config-file elements are then indexed by target|parent so if there are\n     any config-file elements per platform that have the same target and parent, the last config-file element is used.\n     */\n    function getConfigFilesByTargetAndParent(platform) {\n        var configFileData = configXml.findall('platform[@name=\\'' + platform + '\\']/config-file');\n        var result = keyBy(configFileData, function(item) {\n            var parent = item.attrib.parent;\n\n            var mode;\n            if (item.attrib.add){\n                logger.warn(\"add=\\\"true\\\" is deprecated. Change to mode=\\\"add\\\".\");\n                mode = \"add\";\n            }\n            if (item.attrib.mode){\n                mode = item.attrib.mode;\n            }\n\n            //if parent attribute is undefined /* or */, set parent to top level elementree selector\n            if(!parent || parent === '/*' || parent === '*/') {\n                parent = './';\n            }\n            return item.attrib.target + '|' + parent + '|' + mode;\n        });\n        return result;\n    }\n\n    // Parses the config.xml's preferences and config-file elements for a given platform\n    function parseConfigXml(platform) {\n        var configData = {};\n        parsePlatformPreferences(configData, platform);\n        parseConfigFiles(configData, platform);\n\n        return configData;\n    }\n\n    // Retrieves the config.xml's pereferences for a given platform and parses them into JSON data\n    function parsePlatformPreferences(configData, platform) {\n        var preferences = getPlatformPreferences(platform);\n        switch(platform){\n            case \"ios\":\n                parseiOSPreferences(preferences, configData);\n                break;\n            case \"android\":\n                parseAndroidPreferences(preferences, configData);\n                break;\n        }\n    }\n\n    // Parses iOS preferences into project.pbxproj\n    function parseiOSPreferences(preferences, configData){\n        var hasPbxProjPrefs = false;\n        _.each(preferences, function (preference) {\n            if(preference.attrib.name.match(new RegExp(\"^ios-\"))){\n                hasPbxProjPrefs = true;\n                var parts = preference.attrib.name.split(\"-\"),\n                    target = \"project.pbxproj\",\n                    prefData = {\n                        type: parts[1],\n                        name: parts[2],\n                        value: preference.attrib.value\n                    };\n                if(preference.attrib.buildType){\n                    prefData[\"buildType\"] = preference.attrib.buildType;\n                }\n                if(preference.attrib.quote){\n                    prefData[\"quote\"] = preference.attrib.quote;\n                }\n                if(preference.attrib.func){\n                    prefData[\"func\"] = preference.attrib.func;\n                    prefData[\"args\"] = [];\n                    _.each(preference.getchildren(), function (arg) {\n                        if (arg.tag === \"arg\") {\n                            var value;\n                            switch (arg.attrib.type) {\n                                case \"Null\":\n                                    value = null;\n                                    break;\n                                case \"Undefined\":\n                                    value = undefined;\n                                    break;\n                                case \"Object\":\n                                    value = JSON.parse(arg.attrib.value);\n                                    break;\n                                case \"Number\":\n                                    value = Number(arg.attrib.value);\n                                    break;\n                                case \"String\":\n                                    value = String(arg.attrib.value);\n                                    break;\n                                case \"Symbol\":\n                                    value = Symbol(arg.attrib.value);\n                                    break;\n                                default:\n                                    value = arg.attrib.value;\n                                    break;\n                            }\n                            if (arg.attrib.flag !== undefined) {\n                                switch (arg.attrib.flag) {\n                                    case \"path\":\n                                        value = path.isAbsolute(value) ? value : path.join(\"../../\", value);\n                                        break;\n                                }\n                            }\n                            prefData[\"args\"].push(value);\n                        }\n                    });\n                }\n\n                prefData[\"xcconfigEnforce\"] = preference.attrib.xcconfigEnforce ? preference.attrib.xcconfigEnforce : null;\n\n                if(!configData[target]) {\n                    configData[target] = [];\n                }\n                configData[target].push(prefData);\n            }\n        });\n        if(hasPbxProjPrefs){\n            asyncOperationsRemaining++;\n        }\n    }\n\n    // Parses supported Android preferences using the preference mapping into the appropriate XML elements in AndroidManifest.xml\n    function parseAndroidPreferences(preferences, configData){\n        var type = 'preference';\n\n        _.each(preferences, function (preference) {\n            // Extract pre-defined preferences (deprecated)\n            var target,\n                prefData;\n\n            if(preference.attrib.name.match(/^android-manifest\\//)){\n                // Extract manifest Xpath preferences\n                var parts = preference.attrib.name.split(\"/\"),\n                    destination = parts.pop();\n                parts.shift();\n\n                prefData = {\n                    parent: parts.join(\"/\") || \"./\",\n                    type: type,\n                    destination: destination,\n                    data: preference\n                };\n                target = \"AndroidManifest.xml\";\n            }\n\n            if(prefData){\n                if(!configData[target]) {\n                    configData[target] = [];\n                }\n                configData[target].push(prefData);\n            }\n        });\n    }\n\n    // Retrieves the config.xml's config-file elements for a given platform and parses them into JSON data\n    function parseConfigFiles(configData, platform) {\n        var configFiles = getConfigFilesByTargetAndParent(platform),\n            type = 'configFile';\n\n        _.each(configFiles, function (configFile, key) {\n            var keyParts = key.split('|');\n            var target = keyParts[0];\n            var parent = keyParts[1];\n            var mode = keyParts[2];\n            var items = configData[target] || [];\n\n            _.each(configFile.getchildren(), function (element) {\n                items.push({\n                    parent: parent,\n                    type: type,\n                    destination: element.tag,\n                    data: element,\n                    mode: mode\n                });\n            });\n\n            configData[target] = items;\n        });\n    }\n\n    /**\n     * @description Create paths if it's not existing\n     *\n     * @param {object} root - root element\n     * @param {object} item - element to add\n     *\n     * @returns {object}\n     */\n    function createPath(root, item) {\n        var paths = item.parent.split('/'),\n            dir, prevEl, el;\n\n        if (paths && paths.length) {\n            paths.forEach(function (path, index) {\n                dir = paths.slice(0, index + 1).join('/');\n                el = root.find(dir);\n\n                if (!el) {\n                    el = et.SubElement(prevEl ? prevEl : root, path, {});\n                }\n\n                prevEl = el;\n            });\n        }\n\n        return root.find(item.parent || root.find('*/' + item.parent));\n    }\n\n    // Updates the AndroidManifest.xml target file with data from config.xml\n    function updateAndroidManifest(targetFilePath, configItems) {\n        var tempManifest = fileUtils.parseElementtreeSync(targetFilePath),\n            root = tempManifest.getroot();\n\n        var isAllowedMultiple = function(tag, parent){\n            var multipleConfig = null;\n            _.each(androidMultiples, function(multiple){\n                if(multiple.tag === tag && multiple.parent === parent){\n                    multipleConfig = multiple;\n                }\n            });\n            return multipleConfig;\n        };\n\n        _.each(configItems, function (item) {\n            // if parent is not found on the root, child/grandchild nodes are searched\n            var parentEl = root.find(item.parent) || root.find('*/' + item.parent),\n                parentSelector,\n                data = item.data,\n                childSelector = item.destination,\n                childEl;\n\n            _.each(androidActivityNames, function(activityName){\n                if(parentEl){\n                    return;\n                }\n                parentSelector = item.parent.replace(\"{ActivityName}\", activityName);\n                parentEl = root.find(parentSelector) || root.find('*/' + parentSelector);\n            });\n\n            if (item.type === 'preference' && !parentEl) {\n                parentEl = createPath(root, item);\n            }\n\n            if (!parentEl) {\n                return;\n            }\n\n            if (item.type === 'preference') {\n                logger.debug(\"**PREFERENCE\"); //logger.dump(item);\n\n                logger.debug(\"**parentEl\"); //logger.dump(parentEl);\n\n                if(data.attrib['delete'] === 'true') {\n                    logger.debug(\"Deleting preference\");\n                    childEl = parentEl.find(childSelector);\n                    logger.debug(\"**childEl\"); //logger.dump(childEl);\n\n                    if(childEl) {\n                        parentEl.remove(childEl);\n                        logger.debug(\"Deleted preference from parent\");\n                    } else {\n                        childEl = root.find('*/' + childSelector);\n\n                        if (childEl) {\n                            root.remove(childEl);\n                            logger.debug(\"Deleted preference from root\");\n                        }\n                    }\n                } else {\n                    parentEl.attrib[childSelector.replace(\"@\",'')] = data.attrib['value'];\n                }\n            } else { // item.type === 'configFile'\n\n                logger.debug(\"**CONFIG-FILE\");\n                //logger.dump(item);\n                logger.debug(\"childSelector: \" + childSelector);\n\n                var multiple = isAllowedMultiple(childSelector, item.parent);\n                logger.debug(\"isAllowedMultiple: \"+ !!multiple);\n\n\n                var copyDataToElement = function(el){\n                    // copy all config.xml data except for the generated _id property\n                    _.each(data, function (prop, propName) {\n                        if(propName !== '_id') {\n                            el[propName] = prop;\n                        }\n                    });\n                };\n\n                if(multiple){\n                    var uniqueSelector = childSelector + \"[@android:\"+multiple.uniqueBy+\"='\" + data.attrib[\"android:\"+multiple.uniqueBy] + \"']\";\n                    childEl = parentEl.find(uniqueSelector);\n\n                    // if child el is not found by unique selector, compare child contents\n                    if(!childEl){\n                        var similarEls = parentEl.findall(childSelector);\n                        if(similarEls){\n                            var targetEl = new et.Element(item.destination);\n                            copyDataToElement(targetEl);\n\n                            var compareEls; compareEls = function(el1, el2){\n\n                                if(el1.tag !== el2.tag) return false;\n                                if(el1.text !== el2.text) return false;\n                                for(var name in el1.attrib){\n                                    if(!el2.attrib[name] || el1.attrib[name] !== el2.attrib[name]) return false;\n                                }\n                                if(el1._children.length !== el2._children.length) return false;\n                                if(el1._children.length > 0){\n                                    for(var i=0; i<el1._children.length; i++){\n                                        if(compareEls(el1._children[i], el2._children[i]) === false){\n                                            return false;\n                                        }\n                                    }\n                                }\n                                return true;\n                            };\n                            similarEls.forEach(function(similarEl){\n                                if(compareEls(targetEl, similarEl) === true){\n                                    childEl = similarEl;\n                                    return false;\n                                }\n                            });\n                        }\n                    }\n                }else{\n                    childEl = parentEl.find(childSelector);\n                }\n\n                logger.debug(\"**childEl\"); //logger.dump(childEl);\n\n                // if child element doesnt exist, create new element\n                if(!childEl || item.mode === 'add') {\n                    childEl = new et.Element(item.destination);\n                    parentEl.append(childEl);\n                }\n\n                copyDataToElement(childEl);\n            }\n        });\n        fs.writeFileSync(targetFilePath, tempManifest.write({indent: 4}), 'utf-8');\n        logger.verbose(\"Wrote file \" + targetFilePath);\n    }\n\n\n    // Updates target file with data from config.xml\n    function updateWp8Manifest(targetFilePath, configItems) {\n        var tempManifest = fileUtils.parseElementtreeSync(targetFilePath),\n            root = tempManifest.getroot();\n        _.each(configItems, function (item) {\n            // if parent is not found on the root, child/grandchild nodes are searched\n            var parentEl = root.find(item.parent) || root.find('*/' + item.parent),\n                parentSelector,\n                data = item.data,\n                childSelector = item.destination,\n                childEl;\n            if(!parentEl) {\n                return;\n            }\n\n            _.each(data.attrib, function (prop, propName) {\n                childSelector += '[@'+propName+'=\"'+prop+'\"]';\n            });\n\n            childEl = parentEl.find(childSelector);\n            // if child element doesnt exist, create new element\n            if(!childEl) {\n                childEl = new et.Element(item.destination);\n                parentEl.append(childEl);\n            }\n\n            // copy all config.xml data except for the generated _id property\n            _.each(data, function (prop, propName) {\n                if(propName !== '_id') {\n                    childEl[propName] = prop;\n                }\n            });\n\n        });\n        fs.writeFileSync(targetFilePath, tempManifest.write({indent: 4}), 'utf-8');\n        logger.verbose(\"Wrote file \" + targetFilePath);\n    }\n\n    /* Updates the *-Info.plist file with data from config.xml by parsing to an xml string, then using the plist\n     module to convert the data to a map.  The config.xml data is then replaced or appended to the original plist file\n     */\n    function updateIosPlist (targetFilePath, configItems) {\n        var infoPlist = plist.parse(fs.readFileSync(targetFilePath, 'utf-8')),\n            tempInfoPlist;\n\n        _.each(configItems, function (item) {\n            var key = item.parent;\n            var plistXml = '<plist><dict><key>' + key + '</key>';\n            plistXml += eltreeToXmlString(item.data) + '</dict></plist>';\n\n            var configPlistObj = plist.parse(plistXml);\n            var value = configPlistObj[key];\n            if (!value && item.data.tag === \"string\") {\n                value = \"\";\n            }\n            //logger.dump(item);\n            if (item.data.tag === \"array\" && infoPlist[key] && item.mode !== 'replace') {\n                infoPlist[key] = infoPlist[key].concat(value).filter(onlyUnique);\n            } else {\n                infoPlist[key] = value;\n            }\n            logger.verbose(\"Wrote to plist; key=\" + key + \"; value=\" + tostr(infoPlist[key]));\n        });\n\n        tempInfoPlist = plist.build(infoPlist);\n        tempInfoPlist = tempInfoPlist.replace(/<string>[\\s\\r\\n]*<\\/string>/g,'<string></string>');\n        fs.writeFileSync(targetFilePath, tempInfoPlist, 'utf-8');\n        logger.verbose(\"Wrote file \" + targetFilePath);\n    }\n\n    /**\n     * Updates the *-Prefix.pch file file with data from config.xml\n     */\n    function updateIosPch (targetFilePath, configItems) {\n        var content = fs.readFileSync(targetFilePath, 'utf-8');\n        var strings = [];\n        _.each(configItems, function (item) {\n            if (item.data.tag === \"string\") {\n                item.data.text && content.indexOf(item.data.text.trim()) === -1 && strings.push(item.data.text.trim());\n            } else if (item.data.tag === \"array\") {\n                _.each(item.data.getchildren(), function (child) {\n                    child.text && content.indexOf(child.text.trim()) === -1 && strings.push(child.text.trim());\n                });\n            }\n            if (strings.length) {\n                fs.appendFileSync(targetFilePath, os.EOL + strings.join(os.EOL) + os.EOL, { encoding: 'utf-8' });\n            }\n        });\n    }\n\n    /**\n     * Updates the project.pbxproj file with data from config.xml\n     * @param {String} xcodeProjectPath - path to XCode project file\n     * @param {Array} configItems - config items to update project file with\n     */\n    function updateIosPbxProj(xcodeProjectPath, configItems) {\n        var xcodeProject = xcode.project(xcodeProjectPath);\n        xcodeProject.parse(function(err){\n            if(err){\n                // shell is undefined if android platform has been removed and added with a new package id but ios stayed the same.\n                var msg = 'An error occurred during parsing of [' + xcodeProjectPath + ']: ' + JSON.stringify(err);\n                if(typeof shell !== \"undefined\" && shell !== null){\n                    shell.echo(msg);\n                } else{\n                    logger.error(msg + ' - Maybe you forgot to remove/add the ios platform?');\n                }\n            }else{\n                _.each(configItems, function (item) {\n                    switch(item.type){\n                        case \"XCBuildConfiguration\":\n                            var buildConfig = xcodeProject.pbxXCBuildConfigurationSection();\n                            var replaced = updateXCBuildConfiguration(item, buildConfig, \"replace\");\n                            if(!replaced){\n                                updateXCBuildConfiguration(item, buildConfig, \"add\");\n                            }\n                            break;\n                        case \"xcodefunc\":\n                            if (typeof (xcodeProject[item.func]) === \"function\") {\n                                xcodeProject[item.func].apply(xcodeProject, item.args);\n                            }\n                            break;\n                    }\n                });\n                fs.writeFileSync(xcodeProjectPath, xcodeProject.writeSync(), 'utf-8');\n                logger.verbose(\"Wrote file \" + xcodeProjectPath);\n            }\n            asyncOperationsRemaining--;\n            checkComplete();\n        });\n    }\n\n    /**\n     * Updates an XCode build configuration setting with the given item.\n     * @param {Object} item - configuration item containing setting data\n     * @param {Object} buildConfig - XCode build config object\n     * @param {String} mode - update mode: \"replace\" to replace only existing keys or \"add\" to add a new key to every block\n     * @returns {boolean} true if buildConfig was modified\n     */\n    function updateXCBuildConfiguration(item, buildConfig, mode){\n        var modified = false;\n        for(var blockName in buildConfig){\n            var block = buildConfig[blockName];\n\n            if(typeof(block) !== \"object\" || !(block[\"buildSettings\"])) continue;\n            var literalMatch = !!block[\"buildSettings\"][item.name],\n                quotedMatch = !!block[\"buildSettings\"][quoteEscape(item.name)],\n                match = literalMatch || quotedMatch;\n\n            if((match || mode === \"add\") &&\n                (!item.buildType || item.buildType.toLowerCase() === block['name'].toLowerCase())){\n\n                var name;\n                if(match){\n                    name = literalMatch ? item.name : quoteEscape(item.name);\n                }else{\n                    // adding\n                    name = (item.quote && (item.quote === \"none\" || item.quote === \"value\")) ? item.name : quoteEscape(item.name);\n                }\n                var value = (item.quote && (item.quote === \"none\" || item.quote === \"key\")) ? item.value : quoteEscape(item.value);\n\n                block[\"buildSettings\"][name] = value;\n                modified = true;\n                logger.verbose(mode+\" XCBuildConfiguration key={ \"+name+\" } to value={ \"+value+\" } for build type='\"+block['name']+\"' in block='\"+blockName+\"'\");\n            }\n        }\n        return modified;\n    }\n\n    /**\n     * Checks if Cordova's .xcconfig files contain overrides for the given setting, and if so overwrites the value in the .xcconfig file(s).\n     */\n    function updateXCConfigs(configItems, platformPath){\n        xcconfigs.forEach(function(fileName){\n            updateXCConfig(platformPath, fileName, configItems);\n        });\n    }\n\n    function updateXCConfig(platformPath, targetFileName, configItems){\n        var modified = false,\n            targetFilePath = path.join(platformPath, 'cordova', targetFileName);\n\n        // Read file contents\n        logger.verbose(\"Reading \"+targetFileName);\n        var fileContents = fs.readFileSync(targetFilePath, 'utf-8');\n\n        _.each(configItems, function (item) {\n            // some keys have name===undefined; ignore these.\n            if (item.name) {\n                var escapedName = regExpEscape(item.name);\n                var fileBuildType = \"none\";\n                if(targetFileName.match(\"release\")){\n                    fileBuildType = \"release\";\n                }else if(targetFileName.match(\"debug\")){\n                    fileBuildType = \"debug\";\n                }\n\n                var itemBuildType = item.buildType ? item.buildType.toLowerCase() : \"none\";\n\n                var name = item.name;\n                var value = item.value;\n\n                var doReplace = function(){\n                    fileContents = fileContents.replace(new RegExp(\"\\n\\\"?\"+escapedName+\"\\\"?.*\"), \"\\n\"+name+\" = \"+value);\n                    logger.verbose(\"Overwrote \"+item.name+\" with '\"+item.value+\"' in \"+targetFileName);\n                    modified = true;\n                };\n\n                // If item's target build type matches the xcconfig build type\n                if(itemBuildType === fileBuildType){\n                    // If file contains the item, replace it with configured value\n                    if(fileContents.match(escapedName) && item.xcconfigEnforce !== \"false\"){\n                        doReplace();\n                    }else // presence of item is being enforced, so add it to the relevant .xcconfig\n                    if(item.xcconfigEnforce === \"true\"){\n                        fileContents += \"\\n\"+name+\" = \"+value;\n                        modified = true;\n                    }\n                }else\n                // if item is a Debug CODE_SIGNING_IDENTITY, this is a special case: Cordova places its default Debug CODE_SIGNING_IDENTITY in build.xcconfig (not build-debug.xcconfig)\n                // so if buildType=\"debug\", want to overrwrite in build.xcconfig\n                if(item.name.match(\"CODE_SIGN_IDENTITY\") && itemBuildType === \"debug\" && fileBuildType === \"none\" && !item.xcconfigEnforce){\n                    doReplace();\n                }\n            }\n        });\n\n        if(modified){\n            ensureBackup(targetFilePath, 'ios', targetFileName);\n            fs.writeFileSync(targetFilePath, fileContents, 'utf-8');\n            logger.verbose(\"Overwrote \"+targetFileName);\n        }\n\n    }\n\n    function regExpEscape(literal_string) {\n        return literal_string.replace(/[-[\\]{}()*+!<=:?.\\/\\\\^$|#\\s,]/g, '\\\\$&');\n    }\n\n    function quoteEscape(value){\n        return '\"'+value+'\"';\n    }\n\n    function onlyUnique(value, index, self){\n        return self.indexOf(value) === index;\n    }\n\n\n    function ensureBackup(targetFilePath, platform, targetFileName){\n        var backupDirPath = path.join(cwd, 'plugins', context.opts.plugin.id, \"backup\"),\n            backupPlatformPath = path.join(backupDirPath, platform),\n            backupFilePath = path.join(backupPlatformPath, targetFileName);\n\n\n        var backupDirExists = fileUtils.directoryExists(backupDirPath);\n        if(!backupDirExists){\n            fileUtils.createDirectory(backupDirPath);\n            logger.verbose(\"Created backup directory: \"+backupDirPath);\n        }\n\n        var backupPlatformExists = fileUtils.directoryExists(backupPlatformPath);\n        if(!backupPlatformExists){\n            fileUtils.createDirectory(backupPlatformPath);\n            logger.verbose(\"Created backup platform directory: \"+backupPlatformPath);\n        }\n\n        var backupFileExists = fileUtils.fileExists(backupFilePath);\n        if(!backupFileExists){\n            fileUtils.copySync(targetFilePath, backupFilePath);\n            logger.verbose(\"Backed up \"+targetFilePath+\" to \"+backupFilePath);\n        }else{\n            logger.verbose(\"Backup exists for '\"+targetFileName+\"' at: \"+backupFilePath);\n        }\n\n        if(!updatedFiles[targetFilePath]){\n            logger.log(\"Applied custom config from config.xml to \"+targetFilePath);\n            updatedFiles[targetFilePath] = true;\n        }\n    }\n\n    // Parses config.xml data, and update each target file for a specified platform\n    function updatePlatformConfig(platform) {\n        var configData = parseConfigXml(platform),\n            platformPath = path.join(rootdir, 'platforms', platform);\n\n        _.each(configData, function (configItems, targetFileName) {\n            var targetFilePath;\n            if (platform === 'ios') {\n                if (targetFileName.indexOf(\"Info.plist\") > -1) {\n                    targetFileName =  projectName + '-Info.plist';\n                    targetFilePath = path.join(platformPath, projectName, targetFileName);\n                    ensureBackup(targetFilePath, platform, targetFileName);\n                    updateIosPlist(targetFilePath, configItems);\n                }else if (targetFileName === \"project.pbxproj\") {\n                    targetFilePath = path.join(platformPath, projectName + '.xcodeproj', targetFileName);\n                    ensureBackup(targetFilePath, platform, targetFileName);\n                    updateIosPbxProj(targetFilePath, configItems);\n                    updateXCConfigs(configItems, platformPath);\n                }else if (targetFileName.indexOf(\"Entitlements-Release.plist\") > -1) {\n                    targetFilePath = path.join(platformPath, projectName, targetFileName);\n                    ensureBackup(targetFilePath, platform, targetFileName);\n                    updateIosPlist(targetFilePath, configItems);\n                }else if (targetFileName.indexOf(\"Entitlements-Debug.plist\") > -1) {\n                    targetFilePath = path.join(platformPath, projectName, targetFileName);\n                    ensureBackup(targetFilePath, platform, targetFileName);\n                    updateIosPlist(targetFilePath, configItems);\n                }else if (targetFileName.indexOf(\"Prefix.pch\") > -1) {\n                    targetFileName =  projectName + '-Prefix.pch';\n                    targetFilePath = path.join(platformPath, projectName, targetFileName);\n                    ensureBackup(targetFilePath, platform, targetFileName);\n                    updateIosPch(targetFilePath, configItems);\n                }\n\n            } else if (platform === 'android' && targetFileName === 'AndroidManifest.xml') {\n                targetFilePath = path.join(platformPath, targetFileName);\n                ensureBackup(targetFilePath, platform, targetFileName);\n                updateAndroidManifest(targetFilePath, configItems);\n            } else if (platform === 'wp8') {\n                targetFilePath = path.join(platformPath, targetFileName);\n                ensureBackup(targetFilePath, platform, targetFileName);\n                updateWp8Manifest(targetFilePath, configItems);\n            }\n        });\n    }\n\n    // Script operations are complete, so resolve deferred promises\n    function complete(){\n        logger.verbose(\"Finished applying platform config\");\n        deferral.resolve();\n    }\n\n    function checkComplete(){\n        if(syncOperationsComplete && asyncOperationsRemaining === 0){\n            complete();\n        }\n    }\n\n    /*************\n     * Public API\n     *************/\n\n    applyCustomConfig.loadDependencies = function(ctx){\n        fs = require('fs'),\n            _ = require('lodash'),\n            et = require('elementtree'),\n            plist = require('plist'),\n            xcode = require('xcode'),\n            tostr = require('tostr'),\n            os = require('os'),\n            fileUtils = require(path.resolve(hooksPath, \"fileUtils.js\"))(ctx);\n        logger.verbose(\"Loaded module dependencies\");\n    };\n\n    applyCustomConfig.init = function(ctx){\n        context = ctx;\n        rootdir = context.opts.projectRoot;\n\n        configXml = fileUtils.getConfigXml();\n        projectName = fileUtils.getProjectName();\n        settings = fileUtils.getSettings();\n        var runHook = settings.hook ? settings.hook : defaultHook;\n\n        if(context.hook !== runHook){\n            logger.debug(\"Aborting applyCustomConfig.js because current hook '\"+context.hook+\"' is not configured hook '\"+runHook+\"'\");\n            return complete();\n        }\n\n        // go through each of the context platforms\n        _.each(context.opts.platforms, function (platform, index) {\n            platform = platform.trim().toLowerCase();\n            try{\n                updatePlatformConfig(platform);\n                if(index === context.opts.platforms.length - 1){\n                    syncOperationsComplete = true;\n                    checkComplete();\n                }\n            }catch(e){\n                var msg = \"Error updating config for platform '\"+platform+\"': \"+ e.message;\n                logger.error(msg);\n                logger.dump(e);\n                if(settings.stoponerror){\n                    deferral.reject(msg);\n                }\n            }\n        });\n    };\n    return applyCustomConfig;\n})();\n\n// Main\nmodule.exports = function(ctx) {\n    deferral = ctx.requireCordovaModule('q').defer();\n    path = ctx.requireCordovaModule('path');\n    cwd = path.resolve();\n\n    hooksPath = path.resolve(ctx.opts.projectRoot, \"plugins\", ctx.opts.plugin.id, \"hooks\");\n    logger = require(path.resolve(hooksPath, \"logger.js\"))(ctx);\n\n    logger.verbose(\"Running applyCustomConfig.js\");\n\n    var init = function(){\n        applyCustomConfig.init(ctx);\n    };\n\n    var depsLoaded = false;\n    try{\n        applyCustomConfig.loadDependencies(ctx);\n        depsLoaded = true;\n    }catch(e){\n        logger.warn(\"Error loading dependencies (\"+e.message+\") - attempting to resolve\");\n    }\n\n    if(depsLoaded){\n        init();\n    }else{\n        require(path.resolve(hooksPath, \"resolveDependencies.js\"))(ctx).then(function(){\n            try{\n                applyCustomConfig.loadDependencies(ctx);\n                init();\n            }catch(e){\n                logger.error(\"Failed loading dependencies (\"+e.message+\") - unable to resolve\");\n            }\n        });\n    }\n\n    return deferral.promise;\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-custom-config/node_modules/cordova-custom-config/hooks/fileUtils.js":"#!/usr/bin/env node\n\n/**********\n * Globals\n **********/\nvar fs,\n    path,\n    _,\n    et,\n    tostr;\n\n/**\n * Provides files utilities\n */\nvar fileUtils = (function(){\n\n    /**********************\n     * Internal properties\n     *********************/\n    var fileUtils = {}, context, configXmlData, settings;\n\n    /************\n     * Public API\n     ************/\n\n        // Parses a given file into an elementtree object\n    fileUtils.parseElementtreeSync =  function(filename) {\n        var contents = fs.readFileSync(filename, 'utf-8');\n        if(contents) {\n            //Windows is the BOM. Skip the Byte Order Mark.\n            contents = contents.substring(contents.indexOf('<'));\n        }\n        return new et.ElementTree(et.XML(contents));\n    };\n\n    // Parses the config.xml into an elementtree object and stores in the config object\n    fileUtils.getConfigXml = function() {\n        if(!configXmlData) {\n            configXmlData = fileUtils.parseElementtreeSync(path.join(context.opts.projectRoot, 'config.xml'));\n        }\n        return configXmlData;\n    };\n\n    // Returns plugin settings from config.xml\n    fileUtils.getSettings = function (){\n        if(!settings){\n            settings = {};\n            var name, preferences = fileUtils.getConfigXml().findall(\"preference\");\n            _.each(preferences, function (preference) {\n                name = preference.attrib.name;\n                if(name.match(\"cordova-custom-config\")){\n                    settings[name.split('-').pop()] = preference.attrib.value;\n                }\n            });\n        }\n        return settings;\n    };\n\n    // Returns project name from config.xml\n    fileUtils.getProjectName = function(){\n        if(!configXmlData) {\n            fileUtils.getConfigXml();\n        }\n        return configXmlData.findtext('name');\n    };\n\n    fileUtils.fileExists = function(filePath){\n        try {\n            return fs.statSync(filePath).isFile();\n        }\n        catch (err) {\n            return false;\n        }\n    };\n\n    fileUtils.directoryExists = function(dirPath){\n        try {\n            return fs.statSync(dirPath).isDirectory();\n        }\n        catch (err) {\n            return false;\n        }\n    };\n\n    fileUtils.createDirectory = function (dirPath){\n        return fs.mkdirSync(dirPath);\n    };\n\n    fileUtils.copySync = function (sourcePath, targetPath){\n        var contents = fs.readFileSync(sourcePath);\n        fs.writeFileSync(targetPath, contents);\n    };\n\n    fileUtils.copySyncRelative = function (sourcePath, targetPath){\n        fileUtils.copySync(path.resolve(sourcePath), path.resolve(targetPath));\n    };\n\n    fileUtils.init = function(ctx){\n        context = ctx;\n\n        // Load modules\n        fs = require('fs');\n        path = require('path');\n        _ = require('lodash');\n        et = require('elementtree');\n        tostr = require('tostr');\n    };\n    return fileUtils;\n})();\n\nmodule.exports = function(ctx){\n    fileUtils.init(ctx);\n    return fileUtils;\n};","/home/travis/build/npmtest/node-npmtest-cordova-custom-config/node_modules/cordova-custom-config/hooks/logger.js":"#!/usr/bin/env node\n\nvar logger = (function(){\n\n    /**********************\n     * Internal properties\n     *********************/\n    var logger, context, hasColors = true;\n\n    try{\n        require('colors');\n    }catch(e){\n        hasColors = false;\n    }\n\n    function prefixMsg(msg){\n        return context.opts.plugin.id+\": \"+msg;\n    }\n\n    /************\n     * Public API\n     ************/\n    logger = {\n        init: function(ctx){\n            context = ctx;\n        },\n        dump: function (obj){\n            if(context.cmdLine.match(\"--debug\") || context.cmdLine.match(\"--dump\")) {\n                console.log(\"DUMP: \"+require('util').inspect(obj));\n            }\n        },\n        debug: function(msg){\n            if(context.cmdLine.match(\"--debug\")){\n                msg = \"DEBUG: \" + msg;\n                console.log(msg);\n            }\n        },\n        verbose: function(msg){\n            if(context.opts.verbose || context.cmdLine.match(\"--verbose\") || context.cmdLine.match(\"--debug\")){\n                msg = prefixMsg(msg);\n                if(hasColors){\n                    console.log(msg.green);\n                }else{\n                    console.log(msg);\n                }\n            }\n        },\n        log: function(msg){\n            msg = prefixMsg(msg);\n            if(hasColors){\n                console.log(msg.white);\n            }else{\n                console.log(msg);\n            }\n        },\n        info: function(msg){\n            msg = prefixMsg(msg);\n            if(hasColors){\n                console.log(msg.blue);\n            }else{\n                console.info(msg);\n            }\n        },\n        warn: function(msg){\n            msg = prefixMsg(msg);\n            if(hasColors){\n                console.log(msg.yellow);\n            }else{\n                console.warn(msg);\n            }\n        },\n        error: function(msg){\n            msg = prefixMsg(msg);\n            if(hasColors){\n                console.log(msg.red);\n            }else{\n                console.error(msg);\n            }\n        }\n    };\n    return logger;\n})();\n\nmodule.exports = function(ctx){\n    logger.init(ctx);\n    return logger;\n};","/home/travis/build/npmtest/node-npmtest-cordova-custom-config/node_modules/cordova-custom-config/hooks/resolveDependencies.js":"#!/usr/bin/env node\n\nmodule.exports = function(ctx){\n    var PLUGIN_ID = ctx.opts.plugin.id;\n\n    var exec = ctx.requireCordovaModule('child_process').exec;\n    var fs = ctx.requireCordovaModule('fs');\n    var path = ctx.requireCordovaModule('path');\n    var deferral = ctx.requireCordovaModule('q').defer();\n\n    var hooksPath = path.resolve(ctx.opts.projectRoot, \"plugins\", ctx.opts.plugin.id, \"hooks\");\n    var logger = require(path.resolve(hooksPath, \"logger.js\"))(ctx);\n\n    var requiredModulePath = path.resolve(ctx.opts.projectRoot, \"node_modules/\"+PLUGIN_ID);\n    var moduleExists;\n    try {\n        moduleExists =  fs.statSync(requiredModulePath).isDirectory();\n    }\n    catch (err) {\n        moduleExists = false;\n    }\n\n    if(!moduleExists){\n        logger.log(\"npm dependencies missing - installing\");\n        exec('npm install '+PLUGIN_ID, function (err, stdout, stderr) {\n            logger.verbose(stdout);\n            if (err) {\n                logger.verbose(stderr);\n                deferral.reject(\"Error installing npm dependencies: \" + err);\n            }else{\n                logger.log(\"Installed npm dependencies\");\n                deferral.resolve();\n            }\n        });\n    }else{\n        logger.verbose('npm dependencies already installed');\n        deferral.resolve();\n    }\n\n    return deferral.promise;\n};","/home/travis/build/npmtest/node-npmtest-cordova-custom-config/node_modules/cordova-custom-config/hooks/restoreBackups.js":"#!/usr/bin/env node\n\n/**********\n * Globals\n **********/\n\n// Pre-existing Cordova npm modules\nvar deferral, path, cwd;\n\n// Npm dependencies\nvar logger,\n    fs,\n    _,\n    fileUtils;\n\n// Other globals\nvar hooksPath;\n\nvar restoreBackups = (function(){\n\n    /**********************\n     * Internal properties\n     *********************/\n    var restoreBackups = {}, context, projectName, logFn, settings;\n\n    var PLATFORM_CONFIG_FILES = {\n        \"ios\":{\n            \"{projectName}-Info.plist\": \"{projectName}/{projectName}-Info.plist\",\n            \"project.pbxproj\": \"{projectName}.xcodeproj/project.pbxproj\",\n            \"build.xcconfig\": \"cordova/build.xcconfig\",\n            \"build-extras.xcconfig\": \"cordova/build-extras.xcconfig\",\n            \"build-debug.xcconfig\": \"cordova/build-debug.xcconfig\",\n            \"build-release.xcconfig\": \"cordova/build-release.xcconfig\",\n            \"Entitlements-Release.plist\": \"{projectName}/Entitlements-Release.plist\",\n            \"Entitlements-Debug.plist\": \"{projectName}/Entitlements-Debug.plist\"\n        },\n        \"android\":{\n            \"AndroidManifest.xml\": \"AndroidManifest.xml\"\n        }\n    };\n\n    /*********************\n     * Internal functions\n     *********************/\n\n    function restorePlatformBackups(platform){\n        var configFiles = PLATFORM_CONFIG_FILES[platform],\n            backupFile, backupFileName, backupFilePath, backupFileExists, targetFilePath;\n\n        logger.verbose(\"Checking to see if there are backups to restore...\");\n        for(backupFile in configFiles){\n            backupFileName = parseProjectName(backupFile);\n            backupFilePath = path.join(cwd, 'plugins', context.opts.plugin.id, \"backup\", platform, backupFileName);\n            backupFileExists = fileUtils.fileExists(backupFilePath);\n            if(backupFileExists){\n                targetFilePath = path.join(cwd, 'platforms', platform, parseProjectName(configFiles[backupFile]));\n                fileUtils.copySync(backupFilePath, targetFilePath);\n                logFn(\"Restored backup of '\"+backupFileName+\"' to :\"+targetFilePath);\n            }\n        }\n    }\n\n    function parseProjectName(fileName){\n        return fileName.replace(/{(projectName)}/g, projectName);\n    }\n\n    // Script operations are complete, so resolve deferred promises\n    function complete(){\n        deferral.resolve();\n    }\n\n    /*************\n     * Public API\n     *************/\n    restoreBackups.loadDependencies = function(ctx){\n        fs = require('fs'),\n        _ = require('lodash'),\n        fileUtils = require(path.resolve(hooksPath, \"fileUtils.js\"))(ctx);\n        logger.verbose(\"Loaded module dependencies\");\n        restoreBackups.init(ctx);\n    };\n\n    restoreBackups.init = function(ctx){\n        context = ctx;\n\n        projectName = fileUtils.getProjectName();\n        logFn = context.hook === \"before_plugin_uninstall\" ? logger.log : logger.verbose;\n\n        settings = fileUtils.getSettings();\n        if(typeof(settings.autorestore) === \"undefined\" || settings.autorestore === \"false\"){\n            logger.log(\"Skipping auto-restore of config file backup(s)\");\n            complete();\n            return;\n        }\n\n        // go through each of the platform directories\n        var platforms = _.filter(fs.readdirSync('platforms'), function (file) {\n            return fs.statSync(path.resolve('platforms', file)).isDirectory();\n        });\n        _.each(platforms, function (platform, index) {\n            platform = platform.trim().toLowerCase();\n            try{\n                restorePlatformBackups(platform);\n                if(index === platforms.length - 1){\n                    logger.verbose(\"Finished restoring backups\");\n                    complete();\n                }\n            }catch(e){\n                var msg = \"Error restoring backups for platform '\"+platform+\"': \"+ e.message;\n                logger.error(msg);\n                if(settings.stoponerror){\n                    deferral.reject(msg);\n                }\n            }\n        });\n    };\n\n    return restoreBackups;\n})();\n\nmodule.exports = function(ctx) {\n    deferral = ctx.requireCordovaModule('q').defer();\n    path = ctx.requireCordovaModule('path');\n    cwd = path.resolve();\n\n    hooksPath = path.resolve(ctx.opts.projectRoot, \"plugins\", ctx.opts.plugin.id, \"hooks\");\n    logger = require(path.resolve(hooksPath, \"logger.js\"))(ctx);\n    logger.verbose(\"Running restoreBackups.js\");\n    try{\n        restoreBackups.loadDependencies(ctx);\n    }catch(e){\n        logger.warn(\"Error loading dependencies (\"+e.message+\") - attempting to resolve\");\n        require(path.resolve(hooksPath, \"resolveDependencies.js\"))(ctx).then(restoreBackups.loadDependencies.bind(this, ctx));\n    }\n\n    return deferral.promise;\n};","/home/travis/build/npmtest/node-npmtest-cordova-custom-config/node_modules/cordova-custom-config/hooks/triggerExampleProjBuild.js":"#!/usr/bin/env node\n\"use strict\";\n\nvar shell = require('shelljs');\nvar path = require('path');\nvar got = require('got');\n\nvar targetRepo = 'dpa99c/cordova-custom-config-example';\n\nconsole.log(\"Fetching Git commit hash...\");\n\nvar gitCommitRet = shell.exec('git rev-parse HEAD', {\n  cwd: path.join(__dirname, '..')\n});\n\nif (0 !== gitCommitRet.code) {\n  console.error('Error getting git commit hash');\n\n  process.exit(-1);\n}\n\nvar gitCommitHash = gitCommitRet.stdout.trim();\n\nconsole.log(\"Git commit: \"+gitCommitHash);\n\nconsole.log('Calling Travis...');\n\ngot.post(\"https://api.travis-ci.org/repo/\"+encodeURIComponent(targetRepo)+\"/requests\", {\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Travis-API-Version\": \"3\",\n    \"Authorization\": \"token \"+process.env.TRAVIS_API_TOKEN\n  },\n  body: JSON.stringify({\n    request: {\n      message: \"Trigger build at \"+targetRepo+\" commit: \"+gitCommitHash,\n      branch: 'master'\n    }\n  })\n})\n.then(function(){\n  console.log(\"Triggered build of \"+targetRepo);\n})\n.catch(function(err){\n  console.error(err);\n  process.exit(-1);\n});\n\n"}